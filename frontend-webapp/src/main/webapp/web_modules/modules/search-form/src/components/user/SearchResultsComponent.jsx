/**
 * LICENSE_PLACEHOLDER
 **/
import { concat, reduce, find, remove, forEach } from 'lodash'
import { FixedTableContainer } from '@regardsoss/components'
import { AttributeModel } from '@regardsoss/model'
import CatalogEntitySelector from '../../models/catalog/CatalogEntitySelector'
import CatalogEntityActions from '../../models/catalog/CatalogEntityActions'
import ResulsTypeButtons from './ResultsTypeButtons'
import ThumbmailCellComponent from './ThumbmailCellComponent'
import AttributeConfiguration from '../../models/attributes/AttributeConfiguration'
import AttributesRegroupementConfiguration from '../../models/attributes/AttributesRegroupementConfiguration'

/**
 * Constant to define where to find dynamic attributes in the data objects returned by the search endpoint
 * @type {string}
 */
const DATA_ATTRIBUTES_FIELD = 'attributes'
/**
 * React container to manage search requests and display results.
 * Search queries are generated by the FormComponent and used by this container.
 * @author SÃ©bastien binda
 */
class SearchResultsComponent extends React.Component {

  static propTypes = {
    searchQuery: React.PropTypes.string,
    attributesConf: React.PropTypes.arrayOf(AttributeConfiguration),
    attributesRegroupementsConf: React.PropTypes.arrayOf(AttributesRegroupementConfiguration),
    attributeModels: React.PropTypes.objectOf(AttributeModel),
  }

  constructor(props) {
    super(props)
    this.state = {
      sortedColumns: [],
    }
  }

  getFullQuery = () => {
    let fullQuery = this.props.searchQuery

    if (this.state.sortedColumns.length > 0) {
      const result = reduce(this.state.sortedColumns, (sortQuery, column) => {
        if (column.type === null) {
          return sortQuery
        }
        if (sortQuery.length > 0) {
          return `${sortQuery}&${column.attribute}:${column.type}`
        }
        return `${column.attribute}:${column.type}`
      }, '')
      if (result.length > 0) {
        fullQuery = `${this.props.searchQuery}&sort=(${result})`
      }
    }
    return fullQuery
  }

  resultSelection = (selectedEntities) => {
    console.log('Selected entities', selectedEntities)
  }

  sortResultsByColumn = (column, type) => {
    const attributeToSort = column.attributes[0]
    const sortedColumns = concat([], this.state.sortedColumns)
    const col = find(sortedColumns, lcol => lcol.attribute === attributeToSort)
    if (!col) {
      sortedColumns.push({
        attribute: attributeToSort,
        type,
      })
    } else {
      switch (type) {
        case 'ASC':
          col.type = 'ASC'
          break
        case 'DESC':
          col.type = 'DESC'
          break
        default:
          remove(sortedColumns, lcol => lcol.attribute === attributeToSort)
      }
    }
    this.setState({
      sortedColumns,
    })
  }

  render() {
    const columns = []

    // TODO Manage standard attributes with search-form configuration
    columns.push({
      label: 'Image',
      attributes: ['files'],
      customCell: { component: ThumbmailCellComponent, props: {} },
      fixed: 40,
      hideLabel: true,
    })
    columns.push({ label: 'Internal Identifier', attributes: ['id'] })
    columns.push({ label: 'Identifier', attributes: ['sip_id'] })
    columns.push({ label: 'Label', attributes: ['label'], sortable: true })

    // Read module configuration to get attributes to display
    forEach(this.props.attributesConf, (attributeConf) => {
      if (attributeConf.visibility === true) {
        const attribute = find(this.props.attributeModels, att => att.content.id === attributeConf.id)
        if (attribute) {
          columns.push({
            label: attribute.content.name,
            attributes: [`${DATA_ATTRIBUTES_FIELD}.${attribute.content.name}`],
            sortable: true,
          })
        }
      }
    })

    // Read module configuration to get attributes regroupements to display
    forEach(this.props.attributesRegroupementsConf, (attributeConf) => {
      if (attributeConf.visibility === true) {
        const attributes = reduce(attributeConf.attributes, (results, attributeId) => {
          const attribute = find(this.props.attributeModels, att => att.content.id === attributeId)
          if (attribute) {
            results.push(`${DATA_ATTRIBUTES_FIELD}.${attribute.content.name}`)
          }
          return results
        }, [])
        if (attributes && attributes.length > 0) {
          columns.push({
            label: attributeConf.label,
            attributes,
            sortable: false,
          })
        }
      }
    })

    return (
      <div>
        <ResulsTypeButtons />
        <FixedTableContainer
          PageActions={CatalogEntityActions}
          PageSelector={CatalogEntitySelector}
          pageSize={20}
          displayCheckbox
          columns={columns}
          onSelectionChange={this.resultSelection}
          onSortByColumn={this.sortResultsByColumn}
          requestParams={{ queryParams: this.getFullQuery() }}
        />
      </div>
    )
  }
}

export default SearchResultsComponent
