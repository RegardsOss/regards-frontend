// Webpack configuration file
const getCommonConfig = require('./webpack.common.config')
const webpack = require('webpack')
const merge = require('webpack-merge')
const path = require('path')

module.exports = function (projectContextPath) {

  let config = getCommonConfig(projectContextPath, 'prod')

  config = merge(config, {
    output: {
      // Webpack compilation directory
      path: `${projectContextPath}/dist/prod`,
      // Webpack main bundle file name
      filename: 'bundle.js',
      // Webpack chunks files namesc
      chunkFilename: '[id]-[chunkhash].chunck.js',
      publicPath: '/',
    },
    module: {
      noParse: [
        /node_modules\/sinon/,
        /node_modules\/nock/,
      ],
    },
    devServer: {
      stats: {
        assets: false,
        chunks: false,
        children: false,
        colors: true,
        hash: false,
        modules: false,
        source: false,
      },
      // Web directory serve by the webpack dev server
      contentBase: path.resolve(projectContextPath, 'dist', 'prod'), // ??? Without this there is no hot replacement during developpment
      inline: true, // Shows a full-screen overlay in the browser when there are compiler errors or warning
      overlay: {
        warnings: true,
        errors: true,
      },
      port: 3333,
      host: '0.0.0.0', // Enable rewrite urls for navigation routes generated by the router.
      // Necessary to fallback to root directory when attempt to load
      // webpack generated javascripts.
      historyApiFallback: {
        // Rewrite to get bundle.js
        rewrites: [{
          from: /\/bundle\.js(\.map)?/,
          to(context) {
            return context.match[0]
          },
        },],
      },
    },
    devtool: 'cheap-module-source-map',
    plugins: [
      // Add a DLL for npm dependencies
      new webpack.DllReferencePlugin({
        // The path to the manifest file which maps between
        // modules included in a bundle and the internal IDs
        // within that bundle
        manifest: require(`${projectContextPath}/dist/prod/core-manifest.json`),
        context: projectContextPath,
      }),
      // Use our DLL (containing all our cross-usable modules)
      new webpack.DllReferencePlugin({
        // The path to the manifest file which maps between
        // modules included in a bundle and the internal IDs
        // within that bundle
        manifest: require(`${projectContextPath}/dist/prod/coreoss-manifest.json`),
        context: projectContextPath,
      }),
    ],
  })
  return config
}